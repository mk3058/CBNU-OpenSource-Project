{"ast":null,"code":"var _jsxFileName = \"/Users/minkyu/Desktop/CBNU-OpenSource-Project/src/App.js\",\n  _s = $RefreshSig$();\nimport axios from 'axios';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SERVICE_KEY = \"#### API SERVICE KEY ####\";\nconst DATA_TYPE = \"JSON\";\nfunction getPreviousDate() {\n  const currentDate = new Date();\n  currentDate.setDate(currentDate.getDate() - 1);\n  return currentDate.toISOString().slice(0, 10).replace(/-/g, \"\");\n}\nasync function fetchWeatherData() {\n  const BASE_DATE = getPreviousDate();\n  const BASE_TIME = \"2300\";\n  const NX = \"55\";\n  const NY = \"128\";\n  const url = `http://apis.data.go.kr/1360000/VilageFcstInfoService_2.0/getVilageFcst?ServiceKey=${SERVICE_KEY}&pageNo=1&numOfRows=290&dataType=${DATA_TYPE}&base_date=${BASE_DATE}&base_time=${BASE_TIME}&nx=${NX}&ny=${NY}`;\n  try {\n    const response = await axios.get(url);\n    return response.data;\n  } catch (error) {\n    console.error(error);\n  }\n}\nfunction extractChartData(weatherData) {\n  const {\n    response\n  } = weatherData;\n  const {\n    body\n  } = response;\n  const {\n    items\n  } = body;\n  const {\n    item\n  } = items;\n  return item.filter(row => row.category === \"POP\" && row.baseTime === \"2300\").map(row => ({\n    name: row.fcstDate,\n    value: row.fcstValue\n  }));\n}\nfunction WeatherChart(_ref) {\n  let {\n    data\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(LineChart, {\n    width: 500,\n    height: 300,\n    data: data,\n    margin: {\n      top: 5,\n      right: 30,\n      left: 20,\n      bottom: 5\n    },\n    children: [/*#__PURE__*/_jsxDEV(XAxis, {\n      dataKey: \"name\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CartesianGrid, {\n      strokeDasharray: \"3 3\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Line, {\n      type: \"monotone\",\n      dataKey: \"value\",\n      stroke: \"#8884d8\",\n      activeDot: {\n        r: 8\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n}\n_c = WeatherChart;\nconst WeatherGraph = () => {\n  _s();\n  const [data, setData] = useState([]);\n  useEffect(() => {\n    fetch(\"http://apis.data.go.kr/1360000/VilageFcstInfoService_2.0/getVilageFcst?ServiceKey=#### API SERVICE KEY ####&pageNo=1&numOfRows=290&dataType=JSON&base_date=20230502&base_time=2300&nx=55&ny=128\").then(response => response.json()).then(json => json.response.body.items.item).then(items => items.filter(item => item.fcstDate === '20230503' && item.category === 'POP')).then(filteredItems => setData(filteredItems.map(item => ({\n      name: item.fcstTime,\n      value: item.fcstValue\n    }))));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(LineChart, {\n    width: 500,\n    height: 300,\n    data: data,\n    margin: {\n      top: 5,\n      right: 30,\n      left: 20,\n      bottom: 5\n    },\n    children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n      strokeDasharray: \"3 3\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n      dataKey: \"name\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Line, {\n      type: \"monotone\",\n      dataKey: \"value\",\n      stroke: \"#8884d8\",\n      activeDot: {\n        r: 8\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n};\n_s(WeatherGraph, \"IEMTtLVFIuToo7X/raQbJAxzNQU=\");\n_c2 = WeatherGraph;\nexport default WeatherGraph;\nvar _c, _c2;\n$RefreshReg$(_c, \"WeatherChart\");\n$RefreshReg$(_c2, \"WeatherGraph\");","map":{"version":3,"names":["axios","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","jsxDEV","_jsxDEV","SERVICE_KEY","DATA_TYPE","getPreviousDate","currentDate","Date","setDate","getDate","toISOString","slice","replace","fetchWeatherData","BASE_DATE","BASE_TIME","NX","NY","url","response","get","data","error","console","extractChartData","weatherData","body","items","item","filter","row","category","baseTime","map","name","fcstDate","value","fcstValue","WeatherChart","_ref","width","height","margin","top","right","left","bottom","children","dataKey","fileName","_jsxFileName","lineNumber","columnNumber","strokeDasharray","type","stroke","activeDot","r","_c","WeatherGraph","_s","setData","useState","useEffect","fetch","then","json","filteredItems","fcstTime","_c2","$RefreshReg$"],"sources":["/Users/minkyu/Desktop/CBNU-OpenSource-Project/src/App.js"],"sourcesContent":["import axios from 'axios';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';\n\nconst SERVICE_KEY = \"#### API SERVICE KEY ####\";\nconst DATA_TYPE = \"JSON\";\n\nfunction getPreviousDate() {\n  const currentDate = new Date();\n  currentDate.setDate(currentDate.getDate() - 1);\n  return currentDate.toISOString().slice(0, 10).replace(/-/g, \"\");\n}\n\nasync function fetchWeatherData() {\n  const BASE_DATE = getPreviousDate();\n  const BASE_TIME = \"2300\";\n  const NX = \"55\";\n  const NY = \"128\";\n\n  const url = `http://apis.data.go.kr/1360000/VilageFcstInfoService_2.0/getVilageFcst?ServiceKey=${SERVICE_KEY}&pageNo=1&numOfRows=290&dataType=${DATA_TYPE}&base_date=${BASE_DATE}&base_time=${BASE_TIME}&nx=${NX}&ny=${NY}`;\n\n  try {\n    const response = await axios.get(url);\n    return response.data;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nfunction extractChartData(weatherData) {\n  const { response } = weatherData;\n  const { body } = response;\n  const { items } = body;\n  const { item } = items;\n\n  return item\n    .filter(row => row.category === \"POP\" && row.baseTime === \"2300\")\n    .map(row => ({\n      name: row.fcstDate,\n      value: row.fcstValue\n    }));\n}\n\nfunction WeatherChart({ data }) {\n  return (\n    <LineChart\n      width={500}\n      height={300}\n      data={data}\n      margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\n    >\n      <XAxis dataKey=\"name\" />\n      <YAxis />\n      <CartesianGrid strokeDasharray=\"3 3\" />\n      <Tooltip />\n      <Legend />\n      <Line type=\"monotone\" dataKey=\"value\" stroke=\"#8884d8\" activeDot={{ r: 8 }} />\n    </LineChart>\n  );\n}\n\n\nconst WeatherGraph = () => {\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    fetch(\"http://apis.data.go.kr/1360000/VilageFcstInfoService_2.0/getVilageFcst?ServiceKey=#### API SERVICE KEY ####&pageNo=1&numOfRows=290&dataType=JSON&base_date=20230502&base_time=2300&nx=55&ny=128\")\n      .then(response => response.json())\n      .then(json => json.response.body.items.item)\n      .then(items => items.filter(item => item.fcstDate === '20230503' && item.category === 'POP'))\n      .then(filteredItems => setData(filteredItems.map(item => ({name: item.fcstTime, value: item.fcstValue}))))\n  }, [])\n\n  return (\n    <LineChart\n      width={500}\n      height={300}\n      data={data}\n      margin={{\n        top: 5,\n        right: 30,\n        left: 20,\n        bottom: 5,\n      }}\n    >\n      <CartesianGrid strokeDasharray=\"3 3\" />\n      <XAxis dataKey=\"name\" />\n      <YAxis />\n      <Tooltip />\n      <Legend />\n      <Line type=\"monotone\" dataKey=\"value\" stroke=\"#8884d8\" activeDot={{ r: 8 }} />\n    </LineChart>\n  );\n}\n\nexport default WeatherGraph;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}